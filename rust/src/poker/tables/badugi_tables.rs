//! [wiki](https://github.com/lcrocker/ojpoker/wiki/Badugi_Tables) | Badugi lookup tables

use std::sync::LazyLock;
use crate::poker::tables::ojp_load_binary_table;

/// Map from perfect hash to equivalence class
pub static OJP_BG_TABLE_1: LazyLock<Vec<u16>> = LazyLock::new(|| {
    ojp_load_binary_table("ojp_bg_table_1.bin.gz", 270726)
});

/// Alias for BG table: Using high-ace deck and hash function yields
/// identical table, so no reason to store two copies
pub static OJP_BC_TABLE_1: LazyLock<&'static Vec<u16>> = LazyLock::new(|| {
    &*OJP_BG_TABLE_1
});

/// Map from perfect hash to equivalence class
pub static OJP_BG_TABLE_3: LazyLock<Vec<u16>> = LazyLock::new(|| {
    ojp_load_binary_table("ojp_bg_table_3.bin.gz", 133784561)
});

/// Map from equivalence class to hand level and card ranks
pub const OJP_BG_TABLE_2: [u32; 1093] = [
    0x000000, 0x104321, 0x105321, 0x105421, 0x105431, 0x105432, 0x106321, 0x106421,
    0x106431, 0x106432, 0x106521, 0x106531, 0x106532, 0x106541, 0x106542, 0x106543,
    0x107321, 0x107421, 0x107431, 0x107432, 0x107521, 0x107531, 0x107532, 0x107541,
    0x107542, 0x107543, 0x107621, 0x107631, 0x107632, 0x107641, 0x107642, 0x107643,
    0x107651, 0x107652, 0x107653, 0x107654, 0x108321, 0x108421, 0x108431, 0x108432,
    0x108521, 0x108531, 0x108532, 0x108541, 0x108542, 0x108543, 0x108621, 0x108631,
    0x108632, 0x108641, 0x108642, 0x108643, 0x108651, 0x108652, 0x108653, 0x108654,
    0x108721, 0x108731, 0x108732, 0x108741, 0x108742, 0x108743, 0x108751, 0x108752,
    0x108753, 0x108754, 0x108761, 0x108762, 0x108763, 0x108764, 0x108765, 0x109321,
    0x109421, 0x109431, 0x109432, 0x109521, 0x109531, 0x109532, 0x109541, 0x109542,
    0x109543, 0x109621, 0x109631, 0x109632, 0x109641, 0x109642, 0x109643, 0x109651,
    0x109652, 0x109653, 0x109654, 0x109721, 0x109731, 0x109732, 0x109741, 0x109742,
    0x109743, 0x109751, 0x109752, 0x109753, 0x109754, 0x109761, 0x109762, 0x109763,
    0x109764, 0x109765, 0x109821, 0x109831, 0x109832, 0x109841, 0x109842, 0x109843,
    0x109851, 0x109852, 0x109853, 0x109854, 0x109861, 0x109862, 0x109863, 0x109864,
    0x109865, 0x109871, 0x109872, 0x109873, 0x109874, 0x109875, 0x109876, 0x10A321,
    0x10A421, 0x10A431, 0x10A432, 0x10A521, 0x10A531, 0x10A532, 0x10A541, 0x10A542,
    0x10A543, 0x10A621, 0x10A631, 0x10A632, 0x10A641, 0x10A642, 0x10A643, 0x10A651,
    0x10A652, 0x10A653, 0x10A654, 0x10A721, 0x10A731, 0x10A732, 0x10A741, 0x10A742,
    0x10A743, 0x10A751, 0x10A752, 0x10A753, 0x10A754, 0x10A761, 0x10A762, 0x10A763,
    0x10A764, 0x10A765, 0x10A821, 0x10A831, 0x10A832, 0x10A841, 0x10A842, 0x10A843,
    0x10A851, 0x10A852, 0x10A853, 0x10A854, 0x10A861, 0x10A862, 0x10A863, 0x10A864,
    0x10A865, 0x10A871, 0x10A872, 0x10A873, 0x10A874, 0x10A875, 0x10A876, 0x10A921,
    0x10A931, 0x10A932, 0x10A941, 0x10A942, 0x10A943, 0x10A951, 0x10A952, 0x10A953,
    0x10A954, 0x10A961, 0x10A962, 0x10A963, 0x10A964, 0x10A965, 0x10A971, 0x10A972,
    0x10A973, 0x10A974, 0x10A975, 0x10A976, 0x10A981, 0x10A982, 0x10A983, 0x10A984,
    0x10A985, 0x10A986, 0x10A987, 0x10B321, 0x10B421, 0x10B431, 0x10B432, 0x10B521,
    0x10B531, 0x10B532, 0x10B541, 0x10B542, 0x10B543, 0x10B621, 0x10B631, 0x10B632,
    0x10B641, 0x10B642, 0x10B643, 0x10B651, 0x10B652, 0x10B653, 0x10B654, 0x10B721,
    0x10B731, 0x10B732, 0x10B741, 0x10B742, 0x10B743, 0x10B751, 0x10B752, 0x10B753,
    0x10B754, 0x10B761, 0x10B762, 0x10B763, 0x10B764, 0x10B765, 0x10B821, 0x10B831,
    0x10B832, 0x10B841, 0x10B842, 0x10B843, 0x10B851, 0x10B852, 0x10B853, 0x10B854,
    0x10B861, 0x10B862, 0x10B863, 0x10B864, 0x10B865, 0x10B871, 0x10B872, 0x10B873,
    0x10B874, 0x10B875, 0x10B876, 0x10B921, 0x10B931, 0x10B932, 0x10B941, 0x10B942,
    0x10B943, 0x10B951, 0x10B952, 0x10B953, 0x10B954, 0x10B961, 0x10B962, 0x10B963,
    0x10B964, 0x10B965, 0x10B971, 0x10B972, 0x10B973, 0x10B974, 0x10B975, 0x10B976,
    0x10B981, 0x10B982, 0x10B983, 0x10B984, 0x10B985, 0x10B986, 0x10B987, 0x10BA21,
    0x10BA31, 0x10BA32, 0x10BA41, 0x10BA42, 0x10BA43, 0x10BA51, 0x10BA52, 0x10BA53,
    0x10BA54, 0x10BA61, 0x10BA62, 0x10BA63, 0x10BA64, 0x10BA65, 0x10BA71, 0x10BA72,
    0x10BA73, 0x10BA74, 0x10BA75, 0x10BA76, 0x10BA81, 0x10BA82, 0x10BA83, 0x10BA84,
    0x10BA85, 0x10BA86, 0x10BA87, 0x10BA91, 0x10BA92, 0x10BA93, 0x10BA94, 0x10BA95,
    0x10BA96, 0x10BA97, 0x10BA98, 0x10D321, 0x10D421, 0x10D431, 0x10D432, 0x10D521,
    0x10D531, 0x10D532, 0x10D541, 0x10D542, 0x10D543, 0x10D621, 0x10D631, 0x10D632,
    0x10D641, 0x10D642, 0x10D643, 0x10D651, 0x10D652, 0x10D653, 0x10D654, 0x10D721,
    0x10D731, 0x10D732, 0x10D741, 0x10D742, 0x10D743, 0x10D751, 0x10D752, 0x10D753,
    0x10D754, 0x10D761, 0x10D762, 0x10D763, 0x10D764, 0x10D765, 0x10D821, 0x10D831,
    0x10D832, 0x10D841, 0x10D842, 0x10D843, 0x10D851, 0x10D852, 0x10D853, 0x10D854,
    0x10D861, 0x10D862, 0x10D863, 0x10D864, 0x10D865, 0x10D871, 0x10D872, 0x10D873,
    0x10D874, 0x10D875, 0x10D876, 0x10D921, 0x10D931, 0x10D932, 0x10D941, 0x10D942,
    0x10D943, 0x10D951, 0x10D952, 0x10D953, 0x10D954, 0x10D961, 0x10D962, 0x10D963,
    0x10D964, 0x10D965, 0x10D971, 0x10D972, 0x10D973, 0x10D974, 0x10D975, 0x10D976,
    0x10D981, 0x10D982, 0x10D983, 0x10D984, 0x10D985, 0x10D986, 0x10D987, 0x10DA21,
    0x10DA31, 0x10DA32, 0x10DA41, 0x10DA42, 0x10DA43, 0x10DA51, 0x10DA52, 0x10DA53,
    0x10DA54, 0x10DA61, 0x10DA62, 0x10DA63, 0x10DA64, 0x10DA65, 0x10DA71, 0x10DA72,
    0x10DA73, 0x10DA74, 0x10DA75, 0x10DA76, 0x10DA81, 0x10DA82, 0x10DA83, 0x10DA84,
    0x10DA85, 0x10DA86, 0x10DA87, 0x10DA91, 0x10DA92, 0x10DA93, 0x10DA94, 0x10DA95,
    0x10DA96, 0x10DA97, 0x10DA98, 0x10DB21, 0x10DB31, 0x10DB32, 0x10DB41, 0x10DB42,
    0x10DB43, 0x10DB51, 0x10DB52, 0x10DB53, 0x10DB54, 0x10DB61, 0x10DB62, 0x10DB63,
    0x10DB64, 0x10DB65, 0x10DB71, 0x10DB72, 0x10DB73, 0x10DB74, 0x10DB75, 0x10DB76,
    0x10DB81, 0x10DB82, 0x10DB83, 0x10DB84, 0x10DB85, 0x10DB86, 0x10DB87, 0x10DB91,
    0x10DB92, 0x10DB93, 0x10DB94, 0x10DB95, 0x10DB96, 0x10DB97, 0x10DB98, 0x10DBA1,
    0x10DBA2, 0x10DBA3, 0x10DBA4, 0x10DBA5, 0x10DBA6, 0x10DBA7, 0x10DBA8, 0x10DBA9,
    0x10E321, 0x10E421, 0x10E431, 0x10E432, 0x10E521, 0x10E531, 0x10E532, 0x10E541,
    0x10E542, 0x10E543, 0x10E621, 0x10E631, 0x10E632, 0x10E641, 0x10E642, 0x10E643,
    0x10E651, 0x10E652, 0x10E653, 0x10E654, 0x10E721, 0x10E731, 0x10E732, 0x10E741,
    0x10E742, 0x10E743, 0x10E751, 0x10E752, 0x10E753, 0x10E754, 0x10E761, 0x10E762,
    0x10E763, 0x10E764, 0x10E765, 0x10E821, 0x10E831, 0x10E832, 0x10E841, 0x10E842,
    0x10E843, 0x10E851, 0x10E852, 0x10E853, 0x10E854, 0x10E861, 0x10E862, 0x10E863,
    0x10E864, 0x10E865, 0x10E871, 0x10E872, 0x10E873, 0x10E874, 0x10E875, 0x10E876,
    0x10E921, 0x10E931, 0x10E932, 0x10E941, 0x10E942, 0x10E943, 0x10E951, 0x10E952,
    0x10E953, 0x10E954, 0x10E961, 0x10E962, 0x10E963, 0x10E964, 0x10E965, 0x10E971,
    0x10E972, 0x10E973, 0x10E974, 0x10E975, 0x10E976, 0x10E981, 0x10E982, 0x10E983,
    0x10E984, 0x10E985, 0x10E986, 0x10E987, 0x10EA21, 0x10EA31, 0x10EA32, 0x10EA41,
    0x10EA42, 0x10EA43, 0x10EA51, 0x10EA52, 0x10EA53, 0x10EA54, 0x10EA61, 0x10EA62,
    0x10EA63, 0x10EA64, 0x10EA65, 0x10EA71, 0x10EA72, 0x10EA73, 0x10EA74, 0x10EA75,
    0x10EA76, 0x10EA81, 0x10EA82, 0x10EA83, 0x10EA84, 0x10EA85, 0x10EA86, 0x10EA87,
    0x10EA91, 0x10EA92, 0x10EA93, 0x10EA94, 0x10EA95, 0x10EA96, 0x10EA97, 0x10EA98,
    0x10EB21, 0x10EB31, 0x10EB32, 0x10EB41, 0x10EB42, 0x10EB43, 0x10EB51, 0x10EB52,
    0x10EB53, 0x10EB54, 0x10EB61, 0x10EB62, 0x10EB63, 0x10EB64, 0x10EB65, 0x10EB71,
    0x10EB72, 0x10EB73, 0x10EB74, 0x10EB75, 0x10EB76, 0x10EB81, 0x10EB82, 0x10EB83,
    0x10EB84, 0x10EB85, 0x10EB86, 0x10EB87, 0x10EB91, 0x10EB92, 0x10EB93, 0x10EB94,
    0x10EB95, 0x10EB96, 0x10EB97, 0x10EB98, 0x10EBA1, 0x10EBA2, 0x10EBA3, 0x10EBA4,
    0x10EBA5, 0x10EBA6, 0x10EBA7, 0x10EBA8, 0x10EBA9, 0x10ED21, 0x10ED31, 0x10ED32,
    0x10ED41, 0x10ED42, 0x10ED43, 0x10ED51, 0x10ED52, 0x10ED53, 0x10ED54, 0x10ED61,
    0x10ED62, 0x10ED63, 0x10ED64, 0x10ED65, 0x10ED71, 0x10ED72, 0x10ED73, 0x10ED74,
    0x10ED75, 0x10ED76, 0x10ED81, 0x10ED82, 0x10ED83, 0x10ED84, 0x10ED85, 0x10ED86,
    0x10ED87, 0x10ED91, 0x10ED92, 0x10ED93, 0x10ED94, 0x10ED95, 0x10ED96, 0x10ED97,
    0x10ED98, 0x10EDA1, 0x10EDA2, 0x10EDA3, 0x10EDA4, 0x10EDA5, 0x10EDA6, 0x10EDA7,
    0x10EDA8, 0x10EDA9, 0x10EDB1, 0x10EDB2, 0x10EDB3, 0x10EDB4, 0x10EDB5, 0x10EDB6,
    0x10EDB7, 0x10EDB8, 0x10EDB9, 0x10EDBA, 0x200321, 0x200421, 0x200431, 0x200432,
    0x200521, 0x200531, 0x200532, 0x200541, 0x200542, 0x200543, 0x200621, 0x200631,
    0x200632, 0x200641, 0x200642, 0x200643, 0x200651, 0x200652, 0x200653, 0x200654,
    0x200721, 0x200731, 0x200732, 0x200741, 0x200742, 0x200743, 0x200751, 0x200752,
    0x200753, 0x200754, 0x200761, 0x200762, 0x200763, 0x200764, 0x200765, 0x200821,
    0x200831, 0x200832, 0x200841, 0x200842, 0x200843, 0x200851, 0x200852, 0x200853,
    0x200854, 0x200861, 0x200862, 0x200863, 0x200864, 0x200865, 0x200871, 0x200872,
    0x200873, 0x200874, 0x200875, 0x200876, 0x200921, 0x200931, 0x200932, 0x200941,
    0x200942, 0x200943, 0x200951, 0x200952, 0x200953, 0x200954, 0x200961, 0x200962,
    0x200963, 0x200964, 0x200965, 0x200971, 0x200972, 0x200973, 0x200974, 0x200975,
    0x200976, 0x200981, 0x200982, 0x200983, 0x200984, 0x200985, 0x200986, 0x200987,
    0x200A21, 0x200A31, 0x200A32, 0x200A41, 0x200A42, 0x200A43, 0x200A51, 0x200A52,
    0x200A53, 0x200A54, 0x200A61, 0x200A62, 0x200A63, 0x200A64, 0x200A65, 0x200A71,
    0x200A72, 0x200A73, 0x200A74, 0x200A75, 0x200A76, 0x200A81, 0x200A82, 0x200A83,
    0x200A84, 0x200A85, 0x200A86, 0x200A87, 0x200A91, 0x200A92, 0x200A93, 0x200A94,
    0x200A95, 0x200A96, 0x200A97, 0x200A98, 0x200B21, 0x200B31, 0x200B32, 0x200B41,
    0x200B42, 0x200B43, 0x200B51, 0x200B52, 0x200B53, 0x200B54, 0x200B61, 0x200B62,
    0x200B63, 0x200B64, 0x200B65, 0x200B71, 0x200B72, 0x200B73, 0x200B74, 0x200B75,
    0x200B76, 0x200B81, 0x200B82, 0x200B83, 0x200B84, 0x200B85, 0x200B86, 0x200B87,
    0x200B91, 0x200B92, 0x200B93, 0x200B94, 0x200B95, 0x200B96, 0x200B97, 0x200B98,
    0x200BA1, 0x200BA2, 0x200BA3, 0x200BA4, 0x200BA5, 0x200BA6, 0x200BA7, 0x200BA8,
    0x200BA9, 0x200D21, 0x200D31, 0x200D32, 0x200D41, 0x200D42, 0x200D43, 0x200D51,
    0x200D52, 0x200D53, 0x200D54, 0x200D61, 0x200D62, 0x200D63, 0x200D64, 0x200D65,
    0x200D71, 0x200D72, 0x200D73, 0x200D74, 0x200D75, 0x200D76, 0x200D81, 0x200D82,
    0x200D83, 0x200D84, 0x200D85, 0x200D86, 0x200D87, 0x200D91, 0x200D92, 0x200D93,
    0x200D94, 0x200D95, 0x200D96, 0x200D97, 0x200D98, 0x200DA1, 0x200DA2, 0x200DA3,
    0x200DA4, 0x200DA5, 0x200DA6, 0x200DA7, 0x200DA8, 0x200DA9, 0x200DB1, 0x200DB2,
    0x200DB3, 0x200DB4, 0x200DB5, 0x200DB6, 0x200DB7, 0x200DB8, 0x200DB9, 0x200DBA,
    0x200E21, 0x200E31, 0x200E32, 0x200E41, 0x200E42, 0x200E43, 0x200E51, 0x200E52,
    0x200E53, 0x200E54, 0x200E61, 0x200E62, 0x200E63, 0x200E64, 0x200E65, 0x200E71,
    0x200E72, 0x200E73, 0x200E74, 0x200E75, 0x200E76, 0x200E81, 0x200E82, 0x200E83,
    0x200E84, 0x200E85, 0x200E86, 0x200E87, 0x200E91, 0x200E92, 0x200E93, 0x200E94,
    0x200E95, 0x200E96, 0x200E97, 0x200E98, 0x200EA1, 0x200EA2, 0x200EA3, 0x200EA4,
    0x200EA5, 0x200EA6, 0x200EA7, 0x200EA8, 0x200EA9, 0x200EB1, 0x200EB2, 0x200EB3,
    0x200EB4, 0x200EB5, 0x200EB6, 0x200EB7, 0x200EB8, 0x200EB9, 0x200EBA, 0x200ED1,
    0x200ED2, 0x200ED3, 0x200ED4, 0x200ED5, 0x200ED6, 0x200ED7, 0x200ED8, 0x200ED9,
    0x200EDA, 0x200EDB, 0x300021, 0x300031, 0x300032, 0x300041, 0x300042, 0x300043,
    0x300051, 0x300052, 0x300053, 0x300054, 0x300061, 0x300062, 0x300063, 0x300064,
    0x300065, 0x300071, 0x300072, 0x300073, 0x300074, 0x300075, 0x300076, 0x300081,
    0x300082, 0x300083, 0x300084, 0x300085, 0x300086, 0x300087, 0x300091, 0x300092,
    0x300093, 0x300094, 0x300095, 0x300096, 0x300097, 0x300098, 0x3000A1, 0x3000A2,
    0x3000A3, 0x3000A4, 0x3000A5, 0x3000A6, 0x3000A7, 0x3000A8, 0x3000A9, 0x3000B1,
    0x3000B2, 0x3000B3, 0x3000B4, 0x3000B5, 0x3000B6, 0x3000B7, 0x3000B8, 0x3000B9,
    0x3000BA, 0x3000D1, 0x3000D2, 0x3000D3, 0x3000D4, 0x3000D5, 0x3000D6, 0x3000D7,
    0x3000D8, 0x3000D9, 0x3000DA, 0x3000DB, 0x3000E1, 0x3000E2, 0x3000E3, 0x3000E4,
    0x3000E5, 0x3000E6, 0x3000E7, 0x3000E8, 0x3000E9, 0x3000EA, 0x3000EB, 0x3000ED,
    0x400001, 0x400002, 0x400003, 0x400004, 0x400005, 0x400006, 0x400007, 0x400008,
    0x400009, 0x40000A, 0x40000B, 0x40000D, 0x40000E,
];

/// Map from equivalence class to hand level and card ranks
pub const OJP_BC_TABLE_2: [u32; 1093] = [
    0x000000, 0x105432, 0x106432, 0x106532, 0x106542, 0x106543, 0x107432, 0x107532,
    0x107542, 0x107543, 0x107632, 0x107642, 0x107643, 0x107652, 0x107653, 0x107654,
    0x108432, 0x108532, 0x108542, 0x108543, 0x108632, 0x108642, 0x108643, 0x108652,
    0x108653, 0x108654, 0x108732, 0x108742, 0x108743, 0x108752, 0x108753, 0x108754,
    0x108762, 0x108763, 0x108764, 0x108765, 0x109432, 0x109532, 0x109542, 0x109543,
    0x109632, 0x109642, 0x109643, 0x109652, 0x109653, 0x109654, 0x109732, 0x109742,
    0x109743, 0x109752, 0x109753, 0x109754, 0x109762, 0x109763, 0x109764, 0x109765,
    0x109832, 0x109842, 0x109843, 0x109852, 0x109853, 0x109854, 0x109862, 0x109863,
    0x109864, 0x109865, 0x109872, 0x109873, 0x109874, 0x109875, 0x109876, 0x10A432,
    0x10A532, 0x10A542, 0x10A543, 0x10A632, 0x10A642, 0x10A643, 0x10A652, 0x10A653,
    0x10A654, 0x10A732, 0x10A742, 0x10A743, 0x10A752, 0x10A753, 0x10A754, 0x10A762,
    0x10A763, 0x10A764, 0x10A765, 0x10A832, 0x10A842, 0x10A843, 0x10A852, 0x10A853,
    0x10A854, 0x10A862, 0x10A863, 0x10A864, 0x10A865, 0x10A872, 0x10A873, 0x10A874,
    0x10A875, 0x10A876, 0x10A932, 0x10A942, 0x10A943, 0x10A952, 0x10A953, 0x10A954,
    0x10A962, 0x10A963, 0x10A964, 0x10A965, 0x10A972, 0x10A973, 0x10A974, 0x10A975,
    0x10A976, 0x10A982, 0x10A983, 0x10A984, 0x10A985, 0x10A986, 0x10A987, 0x10B432,
    0x10B532, 0x10B542, 0x10B543, 0x10B632, 0x10B642, 0x10B643, 0x10B652, 0x10B653,
    0x10B654, 0x10B732, 0x10B742, 0x10B743, 0x10B752, 0x10B753, 0x10B754, 0x10B762,
    0x10B763, 0x10B764, 0x10B765, 0x10B832, 0x10B842, 0x10B843, 0x10B852, 0x10B853,
    0x10B854, 0x10B862, 0x10B863, 0x10B864, 0x10B865, 0x10B872, 0x10B873, 0x10B874,
    0x10B875, 0x10B876, 0x10B932, 0x10B942, 0x10B943, 0x10B952, 0x10B953, 0x10B954,
    0x10B962, 0x10B963, 0x10B964, 0x10B965, 0x10B972, 0x10B973, 0x10B974, 0x10B975,
    0x10B976, 0x10B982, 0x10B983, 0x10B984, 0x10B985, 0x10B986, 0x10B987, 0x10BA32,
    0x10BA42, 0x10BA43, 0x10BA52, 0x10BA53, 0x10BA54, 0x10BA62, 0x10BA63, 0x10BA64,
    0x10BA65, 0x10BA72, 0x10BA73, 0x10BA74, 0x10BA75, 0x10BA76, 0x10BA82, 0x10BA83,
    0x10BA84, 0x10BA85, 0x10BA86, 0x10BA87, 0x10BA92, 0x10BA93, 0x10BA94, 0x10BA95,
    0x10BA96, 0x10BA97, 0x10BA98, 0x10D432, 0x10D532, 0x10D542, 0x10D543, 0x10D632,
    0x10D642, 0x10D643, 0x10D652, 0x10D653, 0x10D654, 0x10D732, 0x10D742, 0x10D743,
    0x10D752, 0x10D753, 0x10D754, 0x10D762, 0x10D763, 0x10D764, 0x10D765, 0x10D832,
    0x10D842, 0x10D843, 0x10D852, 0x10D853, 0x10D854, 0x10D862, 0x10D863, 0x10D864,
    0x10D865, 0x10D872, 0x10D873, 0x10D874, 0x10D875, 0x10D876, 0x10D932, 0x10D942,
    0x10D943, 0x10D952, 0x10D953, 0x10D954, 0x10D962, 0x10D963, 0x10D964, 0x10D965,
    0x10D972, 0x10D973, 0x10D974, 0x10D975, 0x10D976, 0x10D982, 0x10D983, 0x10D984,
    0x10D985, 0x10D986, 0x10D987, 0x10DA32, 0x10DA42, 0x10DA43, 0x10DA52, 0x10DA53,
    0x10DA54, 0x10DA62, 0x10DA63, 0x10DA64, 0x10DA65, 0x10DA72, 0x10DA73, 0x10DA74,
    0x10DA75, 0x10DA76, 0x10DA82, 0x10DA83, 0x10DA84, 0x10DA85, 0x10DA86, 0x10DA87,
    0x10DA92, 0x10DA93, 0x10DA94, 0x10DA95, 0x10DA96, 0x10DA97, 0x10DA98, 0x10DB32,
    0x10DB42, 0x10DB43, 0x10DB52, 0x10DB53, 0x10DB54, 0x10DB62, 0x10DB63, 0x10DB64,
    0x10DB65, 0x10DB72, 0x10DB73, 0x10DB74, 0x10DB75, 0x10DB76, 0x10DB82, 0x10DB83,
    0x10DB84, 0x10DB85, 0x10DB86, 0x10DB87, 0x10DB92, 0x10DB93, 0x10DB94, 0x10DB95,
    0x10DB96, 0x10DB97, 0x10DB98, 0x10DBA2, 0x10DBA3, 0x10DBA4, 0x10DBA5, 0x10DBA6,
    0x10DBA7, 0x10DBA8, 0x10DBA9, 0x10E432, 0x10E532, 0x10E542, 0x10E543, 0x10E632,
    0x10E642, 0x10E643, 0x10E652, 0x10E653, 0x10E654, 0x10E732, 0x10E742, 0x10E743,
    0x10E752, 0x10E753, 0x10E754, 0x10E762, 0x10E763, 0x10E764, 0x10E765, 0x10E832,
    0x10E842, 0x10E843, 0x10E852, 0x10E853, 0x10E854, 0x10E862, 0x10E863, 0x10E864,
    0x10E865, 0x10E872, 0x10E873, 0x10E874, 0x10E875, 0x10E876, 0x10E932, 0x10E942,
    0x10E943, 0x10E952, 0x10E953, 0x10E954, 0x10E962, 0x10E963, 0x10E964, 0x10E965,
    0x10E972, 0x10E973, 0x10E974, 0x10E975, 0x10E976, 0x10E982, 0x10E983, 0x10E984,
    0x10E985, 0x10E986, 0x10E987, 0x10EA32, 0x10EA42, 0x10EA43, 0x10EA52, 0x10EA53,
    0x10EA54, 0x10EA62, 0x10EA63, 0x10EA64, 0x10EA65, 0x10EA72, 0x10EA73, 0x10EA74,
    0x10EA75, 0x10EA76, 0x10EA82, 0x10EA83, 0x10EA84, 0x10EA85, 0x10EA86, 0x10EA87,
    0x10EA92, 0x10EA93, 0x10EA94, 0x10EA95, 0x10EA96, 0x10EA97, 0x10EA98, 0x10EB32,
    0x10EB42, 0x10EB43, 0x10EB52, 0x10EB53, 0x10EB54, 0x10EB62, 0x10EB63, 0x10EB64,
    0x10EB65, 0x10EB72, 0x10EB73, 0x10EB74, 0x10EB75, 0x10EB76, 0x10EB82, 0x10EB83,
    0x10EB84, 0x10EB85, 0x10EB86, 0x10EB87, 0x10EB92, 0x10EB93, 0x10EB94, 0x10EB95,
    0x10EB96, 0x10EB97, 0x10EB98, 0x10EBA2, 0x10EBA3, 0x10EBA4, 0x10EBA5, 0x10EBA6,
    0x10EBA7, 0x10EBA8, 0x10EBA9, 0x10ED32, 0x10ED42, 0x10ED43, 0x10ED52, 0x10ED53,
    0x10ED54, 0x10ED62, 0x10ED63, 0x10ED64, 0x10ED65, 0x10ED72, 0x10ED73, 0x10ED74,
    0x10ED75, 0x10ED76, 0x10ED82, 0x10ED83, 0x10ED84, 0x10ED85, 0x10ED86, 0x10ED87,
    0x10ED92, 0x10ED93, 0x10ED94, 0x10ED95, 0x10ED96, 0x10ED97, 0x10ED98, 0x10EDA2,
    0x10EDA3, 0x10EDA4, 0x10EDA5, 0x10EDA6, 0x10EDA7, 0x10EDA8, 0x10EDA9, 0x10EDB2,
    0x10EDB3, 0x10EDB4, 0x10EDB5, 0x10EDB6, 0x10EDB7, 0x10EDB8, 0x10EDB9, 0x10EDBA,
    0x10F432, 0x10F532, 0x10F542, 0x10F543, 0x10F632, 0x10F642, 0x10F643, 0x10F652,
    0x10F653, 0x10F654, 0x10F732, 0x10F742, 0x10F743, 0x10F752, 0x10F753, 0x10F754,
    0x10F762, 0x10F763, 0x10F764, 0x10F765, 0x10F832, 0x10F842, 0x10F843, 0x10F852,
    0x10F853, 0x10F854, 0x10F862, 0x10F863, 0x10F864, 0x10F865, 0x10F872, 0x10F873,
    0x10F874, 0x10F875, 0x10F876, 0x10F932, 0x10F942, 0x10F943, 0x10F952, 0x10F953,
    0x10F954, 0x10F962, 0x10F963, 0x10F964, 0x10F965, 0x10F972, 0x10F973, 0x10F974,
    0x10F975, 0x10F976, 0x10F982, 0x10F983, 0x10F984, 0x10F985, 0x10F986, 0x10F987,
    0x10FA32, 0x10FA42, 0x10FA43, 0x10FA52, 0x10FA53, 0x10FA54, 0x10FA62, 0x10FA63,
    0x10FA64, 0x10FA65, 0x10FA72, 0x10FA73, 0x10FA74, 0x10FA75, 0x10FA76, 0x10FA82,
    0x10FA83, 0x10FA84, 0x10FA85, 0x10FA86, 0x10FA87, 0x10FA92, 0x10FA93, 0x10FA94,
    0x10FA95, 0x10FA96, 0x10FA97, 0x10FA98, 0x10FB32, 0x10FB42, 0x10FB43, 0x10FB52,
    0x10FB53, 0x10FB54, 0x10FB62, 0x10FB63, 0x10FB64, 0x10FB65, 0x10FB72, 0x10FB73,
    0x10FB74, 0x10FB75, 0x10FB76, 0x10FB82, 0x10FB83, 0x10FB84, 0x10FB85, 0x10FB86,
    0x10FB87, 0x10FB92, 0x10FB93, 0x10FB94, 0x10FB95, 0x10FB96, 0x10FB97, 0x10FB98,
    0x10FBA2, 0x10FBA3, 0x10FBA4, 0x10FBA5, 0x10FBA6, 0x10FBA7, 0x10FBA8, 0x10FBA9,
    0x10FD32, 0x10FD42, 0x10FD43, 0x10FD52, 0x10FD53, 0x10FD54, 0x10FD62, 0x10FD63,
    0x10FD64, 0x10FD65, 0x10FD72, 0x10FD73, 0x10FD74, 0x10FD75, 0x10FD76, 0x10FD82,
    0x10FD83, 0x10FD84, 0x10FD85, 0x10FD86, 0x10FD87, 0x10FD92, 0x10FD93, 0x10FD94,
    0x10FD95, 0x10FD96, 0x10FD97, 0x10FD98, 0x10FDA2, 0x10FDA3, 0x10FDA4, 0x10FDA5,
    0x10FDA6, 0x10FDA7, 0x10FDA8, 0x10FDA9, 0x10FDB2, 0x10FDB3, 0x10FDB4, 0x10FDB5,
    0x10FDB6, 0x10FDB7, 0x10FDB8, 0x10FDB9, 0x10FDBA, 0x10FE32, 0x10FE42, 0x10FE43,
    0x10FE52, 0x10FE53, 0x10FE54, 0x10FE62, 0x10FE63, 0x10FE64, 0x10FE65, 0x10FE72,
    0x10FE73, 0x10FE74, 0x10FE75, 0x10FE76, 0x10FE82, 0x10FE83, 0x10FE84, 0x10FE85,
    0x10FE86, 0x10FE87, 0x10FE92, 0x10FE93, 0x10FE94, 0x10FE95, 0x10FE96, 0x10FE97,
    0x10FE98, 0x10FEA2, 0x10FEA3, 0x10FEA4, 0x10FEA5, 0x10FEA6, 0x10FEA7, 0x10FEA8,
    0x10FEA9, 0x10FEB2, 0x10FEB3, 0x10FEB4, 0x10FEB5, 0x10FEB6, 0x10FEB7, 0x10FEB8,
    0x10FEB9, 0x10FEBA, 0x10FED2, 0x10FED3, 0x10FED4, 0x10FED5, 0x10FED6, 0x10FED7,
    0x10FED8, 0x10FED9, 0x10FEDA, 0x10FEDB, 0x200432, 0x200532, 0x200542, 0x200543,
    0x200632, 0x200642, 0x200643, 0x200652, 0x200653, 0x200654, 0x200732, 0x200742,
    0x200743, 0x200752, 0x200753, 0x200754, 0x200762, 0x200763, 0x200764, 0x200765,
    0x200832, 0x200842, 0x200843, 0x200852, 0x200853, 0x200854, 0x200862, 0x200863,
    0x200864, 0x200865, 0x200872, 0x200873, 0x200874, 0x200875, 0x200876, 0x200932,
    0x200942, 0x200943, 0x200952, 0x200953, 0x200954, 0x200962, 0x200963, 0x200964,
    0x200965, 0x200972, 0x200973, 0x200974, 0x200975, 0x200976, 0x200982, 0x200983,
    0x200984, 0x200985, 0x200986, 0x200987, 0x200A32, 0x200A42, 0x200A43, 0x200A52,
    0x200A53, 0x200A54, 0x200A62, 0x200A63, 0x200A64, 0x200A65, 0x200A72, 0x200A73,
    0x200A74, 0x200A75, 0x200A76, 0x200A82, 0x200A83, 0x200A84, 0x200A85, 0x200A86,
    0x200A87, 0x200A92, 0x200A93, 0x200A94, 0x200A95, 0x200A96, 0x200A97, 0x200A98,
    0x200B32, 0x200B42, 0x200B43, 0x200B52, 0x200B53, 0x200B54, 0x200B62, 0x200B63,
    0x200B64, 0x200B65, 0x200B72, 0x200B73, 0x200B74, 0x200B75, 0x200B76, 0x200B82,
    0x200B83, 0x200B84, 0x200B85, 0x200B86, 0x200B87, 0x200B92, 0x200B93, 0x200B94,
    0x200B95, 0x200B96, 0x200B97, 0x200B98, 0x200BA2, 0x200BA3, 0x200BA4, 0x200BA5,
    0x200BA6, 0x200BA7, 0x200BA8, 0x200BA9, 0x200D32, 0x200D42, 0x200D43, 0x200D52,
    0x200D53, 0x200D54, 0x200D62, 0x200D63, 0x200D64, 0x200D65, 0x200D72, 0x200D73,
    0x200D74, 0x200D75, 0x200D76, 0x200D82, 0x200D83, 0x200D84, 0x200D85, 0x200D86,
    0x200D87, 0x200D92, 0x200D93, 0x200D94, 0x200D95, 0x200D96, 0x200D97, 0x200D98,
    0x200DA2, 0x200DA3, 0x200DA4, 0x200DA5, 0x200DA6, 0x200DA7, 0x200DA8, 0x200DA9,
    0x200DB2, 0x200DB3, 0x200DB4, 0x200DB5, 0x200DB6, 0x200DB7, 0x200DB8, 0x200DB9,
    0x200DBA, 0x200E32, 0x200E42, 0x200E43, 0x200E52, 0x200E53, 0x200E54, 0x200E62,
    0x200E63, 0x200E64, 0x200E65, 0x200E72, 0x200E73, 0x200E74, 0x200E75, 0x200E76,
    0x200E82, 0x200E83, 0x200E84, 0x200E85, 0x200E86, 0x200E87, 0x200E92, 0x200E93,
    0x200E94, 0x200E95, 0x200E96, 0x200E97, 0x200E98, 0x200EA2, 0x200EA3, 0x200EA4,
    0x200EA5, 0x200EA6, 0x200EA7, 0x200EA8, 0x200EA9, 0x200EB2, 0x200EB3, 0x200EB4,
    0x200EB5, 0x200EB6, 0x200EB7, 0x200EB8, 0x200EB9, 0x200EBA, 0x200ED2, 0x200ED3,
    0x200ED4, 0x200ED5, 0x200ED6, 0x200ED7, 0x200ED8, 0x200ED9, 0x200EDA, 0x200EDB,
    0x200F32, 0x200F42, 0x200F43, 0x200F52, 0x200F53, 0x200F54, 0x200F62, 0x200F63,
    0x200F64, 0x200F65, 0x200F72, 0x200F73, 0x200F74, 0x200F75, 0x200F76, 0x200F82,
    0x200F83, 0x200F84, 0x200F85, 0x200F86, 0x200F87, 0x200F92, 0x200F93, 0x200F94,
    0x200F95, 0x200F96, 0x200F97, 0x200F98, 0x200FA2, 0x200FA3, 0x200FA4, 0x200FA5,
    0x200FA6, 0x200FA7, 0x200FA8, 0x200FA9, 0x200FB2, 0x200FB3, 0x200FB4, 0x200FB5,
    0x200FB6, 0x200FB7, 0x200FB8, 0x200FB9, 0x200FBA, 0x200FD2, 0x200FD3, 0x200FD4,
    0x200FD5, 0x200FD6, 0x200FD7, 0x200FD8, 0x200FD9, 0x200FDA, 0x200FDB, 0x200FE2,
    0x200FE3, 0x200FE4, 0x200FE5, 0x200FE6, 0x200FE7, 0x200FE8, 0x200FE9, 0x200FEA,
    0x200FEB, 0x200FED, 0x300032, 0x300042, 0x300043, 0x300052, 0x300053, 0x300054,
    0x300062, 0x300063, 0x300064, 0x300065, 0x300072, 0x300073, 0x300074, 0x300075,
    0x300076, 0x300082, 0x300083, 0x300084, 0x300085, 0x300086, 0x300087, 0x300092,
    0x300093, 0x300094, 0x300095, 0x300096, 0x300097, 0x300098, 0x3000A2, 0x3000A3,
    0x3000A4, 0x3000A5, 0x3000A6, 0x3000A7, 0x3000A8, 0x3000A9, 0x3000B2, 0x3000B3,
    0x3000B4, 0x3000B5, 0x3000B6, 0x3000B7, 0x3000B8, 0x3000B9, 0x3000BA, 0x3000D2,
    0x3000D3, 0x3000D4, 0x3000D5, 0x3000D6, 0x3000D7, 0x3000D8, 0x3000D9, 0x3000DA,
    0x3000DB, 0x3000E2, 0x3000E3, 0x3000E4, 0x3000E5, 0x3000E6, 0x3000E7, 0x3000E8,
    0x3000E9, 0x3000EA, 0x3000EB, 0x3000ED, 0x3000F2, 0x3000F3, 0x3000F4, 0x3000F5,
    0x3000F6, 0x3000F7, 0x3000F8, 0x3000F9, 0x3000FA, 0x3000FB, 0x3000FD, 0x3000FE,
    0x400002, 0x400003, 0x400004, 0x400005, 0x400006, 0x400007, 0x400008, 0x400009,
    0x40000A, 0x40000B, 0x40000D, 0x40000E, 0x40000F,
];

#[cfg(test)]
mod tests {
    use super::*;
    use crate::error::Result;

    #[test]
    fn test_validate_tables() -> Result<()> {
        assert_eq!(OJP_BG_TABLE_1.len(), 270726);
        assert_eq!(OJP_BG_TABLE_2.len(), 1093);
        assert_eq!(OJP_BC_TABLE_2.len(), 1093);
        assert_eq!(OJP_BG_TABLE_3.len(), 133784561);

        assert_eq!(OJP_BG_TABLE_1[1], 1080);
        assert_eq!(OJP_BG_TABLE_1[270725], 1092);
        assert_eq!(OJP_BG_TABLE_2[1], 0x104321);
        assert_eq!(OJP_BG_TABLE_2[1092], 0x40000E);
        assert_eq!(OJP_BC_TABLE_2[1], 0x105432);
        assert_eq!(OJP_BC_TABLE_2[1092], 0x40000F);
        assert_eq!(OJP_BG_TABLE_3[1], 1002);
        assert_eq!(OJP_BG_TABLE_3[133784560], 1079);

        for i in 1..270726 {
            let ec = OJP_BG_TABLE_1[i];
            assert!(0 != ec && ec < 1093);
        }
        for i in 1..1093 {
            let d = OJP_BG_TABLE_2[i];
            assert!(0 != d && d < 0x03FF_FFFF);
            assert!(d > OJP_BG_TABLE_2[i-1]);
            let d = OJP_BC_TABLE_2[i];
            assert!(0 != d && d < 0x03FF_FFFF);
            assert!(d > OJP_BC_TABLE_2[i-1]);
        }
        for i in 1..133784561 {
            let ec = OJP_BG_TABLE_3[i];
            assert!(0 != ec);
            assert!(ec < 1093);
        }
        Ok(())
    }
}
